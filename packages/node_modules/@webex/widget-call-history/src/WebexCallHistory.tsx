import React, { forwardRef, useImperativeHandle, useState } from 'react';


import './WebexCallHistory.styles.scss';

export type IWebexCallHistoryProps = {
  userID: string;
  noHistoryMessage?: string | undefined;
  style?: React.CSSProperties;
};

export interface IWebexCallHistoryHandle {
  refreshCallHistory: () => void;
  getLastUpdated: () => Date | undefined;
}

/**
 * @description The summary of this component.
 * @param {IWebexCallHistoryProps} obj - An object of props.
 * @param {string} obj.userID The ID of the current user
 * @param {string} obj.headerText The label for the header
 * @param {string} obj.noHistoryMessage The message when call history is empty
 * @param {Function} obj.onPress Handle when item is pressed
 * @param {Function} obj.onAudioCallPress Handle when audio call button is pressed
 * @param {Function} obj.onVideoCallPress Handle when video call button is pressed
 * @param {React.CSSProperties} obj.style Custom style for overriding this component's CSS
 * @returns {React.Component} WebexCallHistory component
 */
export const WebexCallHistory = forwardRef<
  IWebexCallHistoryHandle,
  IWebexCallHistoryProps
>(
  (
    { userID, style, noHistoryMessage},
    ref
  ) => {
    const {
      callHistory = [],
      lastUpdated,
      refresh,
      loading,
    } = useCallHistory(userID);

    useImperativeHandle(ref, () => ({
      refreshCallHistory() {
        refresh();
      },
      getLastUpdated() {
        return lastUpdated;
      },
    }));

    const isEmpty = callHistory?.length === 0;


    const [cssClasses, sc] = useWebexClasses('call-history-widget', '', {
      loading,
      'is-empty': isEmpty && !loading,
    });

    const [selected, setSelected] = useState<any | undefined>(
      undefined
    );

    return (
      <div className={cssClasses} style={style}>
      sample
      </div>
    );
  }
);

WebexCallHistory.defaultProps = {
  style: undefined,
  noHistoryMessage: 'Your recent calls will appear here.',
};
function useCallHistory(userID: string): { callHistory?: undefined[]; lastUpdated: any; refresh: any; loading: any; } {
  throw new Error('Function not implemented.');
}

function useWebexClasses(arg0: string, arg1: string, arg2: { loading: any; 'is-empty': boolean; }): [any, any] {
  throw new Error('Function not implemented.');
}

