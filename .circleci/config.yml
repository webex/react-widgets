# Main Config
version: 2.1

# reusable environment for all jobs
executors:
  main-executor:
    working_directory: ~/react-widgets
    docker:
      - image: circleci/node:fermium
        # environment variables for all commands executed in the main-executor
        environment:
          AWS_BUCKET: code.s4d.io
          AWS_REGION: us-east-1

# Orb to grab `s3` capability for us
orbs:
  aws-s3: circleci/aws-s3@3.0.0
  jq: circleci/jq@1.9.0

# Reusable commands for jobs
commands:
  restore_workspace:
    steps:
      - attach_workspace:
          at: ~/react-widgets
  restore_node_modules:
    description: "Restore the node_modules dependencies cache"
    steps:
      - restore_cache:
          keys:
            - node-modules-cache-node-fermium-npm-6-{{ .Environment.CACHE_VERSION }}-{{ checksum "package-lock.json" }}
            - node-modules-cache-node-fermium-npm-6-{{ .Environment.CACHE_VERSION }}-

jobs:
  install:
    executor: main-executor
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: npm ci
      # Cache node_modules across different internal jobs in the workflow and across different circleci runs
      - save_cache:
          key: node-modules-cache-node-fermium-npm-6-{{ .Environment.CACHE_VERSION }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Save NPM install log
          command: npm ls --json > /tmp/npm_install.log || true
      - store_artifacts:
          path: /tmp/npm_install.log
          destination: npm-install

  unit_tests_and_linting:
    executor: main-executor
    steps:
      - checkout
      - restore_workspace
      - restore_node_modules
      - run:
          name: Run eslint
          command: npm run eslint -- --format junit -o reports/junit/js-lint-results.xml
      - run:
          name: Run all Jest test suites
          command: npm run jest -- --ci -i --reporters="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT_NAME: js-jest-results.xml
            JEST_JUNIT_OUTPUT_DIR: reports/junit/jest
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
          destination: junit

  build_for_tests:
    executor: main-executor
    environment:
      FEDERATION: true
      NODE_ENV: test
      WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL: https://conversation-intb.ciscospark.com/conversation/api/v1
      WEBEX_CONVERSATION_DEFAULT_CLUSTER: urn:TEAM:us-east-1_int13:identityLookup
      HYDRA_SERVICE_URL: https://apialpha.ciscospark.com/v1/
      IDBROKER_BASE_URL: https://idbrokerbts.webex.com
      U2C_SERVICE_URL: https://u2c-intb.ciscospark.com/u2c/api/v1
      WDM_SERVICE_URL: https://wdm-intb.ciscospark.com/wdm/api/v1

    steps:
      - checkout
      - restore_workspace
      - restore_node_modules
      - run:
          name: Copy and build journey test static files
          command: npm run build journey dist-test
      - persist_to_workspace:
          root: ~/react-widgets
          paths:
            - dist-test

  journey_tests_chrome:
    executor: main-executor
    environment:
      SAUCE: true
      STATIC_SERVER_PATH: dist-test
      WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL: https://conversation-intb.ciscospark.com/conversation/api/v1
      WEBEX_CONVERSATION_DEFAULT_CLUSTER: urn:TEAM:us-east-1_int13:identityLookup
      HYDRA_SERVICE_URL: https://apialpha.ciscospark.com/v1/
      IDBROKER_BASE_URL: https://idbrokerbts.webex.com
      U2C_SERVICE_URL: https://u2c-intb.ciscospark.com/u2c/api/v1
      WDM_SERVICE_URL: https://wdm-intb.ciscospark.com/wdm/api/v1
    steps:
      - checkout
      - restore_workspace
      - restore_node_modules
      - run: echo "export BUILD_NUMBER=circle-ci-${CIRCLE_BUILD_NUM}" >> $BASH_ENV
      - run:
          name: Integration Tests Chrome
          no_output_timeout: 30m
          command: |
            set -em
            BROWSER=chrome npm run test:integration
      - store_test_results:
          path: reports/junit/wdio
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
          destination: npm-logs
      - store_artifacts:
          path: reports/browser
          destination: browser

  journey_tests_firefox:
    executor: main-executor
    environment:
      SAUCE: true
      STATIC_SERVER_PATH: dist-test
      WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL: https://conversation-intb.ciscospark.com/conversation/api/v1
      WEBEX_CONVERSATION_DEFAULT_CLUSTER: urn:TEAM:us-east-1_int13:identityLookup
      HYDRA_SERVICE_URL: https://apialpha.ciscospark.com/v1/
      IDBROKER_BASE_URL: https://idbrokerbts.webex.com
      U2C_SERVICE_URL: https://u2c-intb.ciscospark.com/u2c/api/v1
      WDM_SERVICE_URL: https://wdm-intb.ciscospark.com/wdm/api/v1
    steps:
      - checkout
      - restore_workspace
      - restore_node_modules
      - run: echo "export BUILD_NUMBER=circle-ci-${CIRCLE_BUILD_NUM}" >> $BASH_ENV
      - run:
          name: Integration Tests Firefox
          no_output_timeout: 30m
          command: |
            set -em
            BROWSER=firefox npm run test:integration
      - store_test_results:
          path: reports/junit/wdio
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
          destination: npm-logs
      - store_artifacts:
          path: reports/browser
          destination: browser

  version_and_publish:
    executor: main-executor
    steps:
      - checkout
      - run: git remote add upstream git@github.com:webex/react-widgets.git
      - restore_node_modules
      - add_ssh_keys:
          fingerprints:
            - "df:fe:3e:ee:15:bd:fb:a1:15:0d:74:78:65:98:db:76"
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: "Generate Version Number"
          command: |
            npm run release -- --release-as minor --no-verify
            echo export VERSION_NUMBER=$(npx -c 'echo \"$npm_package_version\"') >> $BASH_ENV
            git rev-parse HEAD > gitcommit
      - run:
          name: "Build for CDN"
          command: |
            export NODE_ENV=production
            export WEBEX_SCOPE="Identity:OAuthClient webexsquare:get_conversation webexsquare:admin spark:people_read spark:rooms_read spark:rooms_write spark:memberships_read spark:memberships_write spark:messages_read spark:messages_write spark:applications_read spark:applications_write spark:teams_read spark:teams_write spark:team_memberships_read spark:team_memberships_write spark:bots_read spark:bots_write spark:kms"
            BUILD_PUBLIC_PATH="https://code.s4d.io/widget-space/archives/${VERSION_NUMBER}/" npm run build:package widget-space
            BUILD_PUBLIC_PATH="https://code.s4d.io/widget-space/archives/${VERSION_NUMBER}/" npm run build sri widget-space
            BUILD_PUBLIC_PATH="https://code.s4d.io/widget-recents/archives/${VERSION_NUMBER}/" npm run build:package widget-recents
            BUILD_PUBLIC_PATH="https://code.s4d.io/widget-recents/archives/${VERSION_NUMBER}/" npm run build sri widget-recents
            BUILD_PUBLIC_PATH="https://code.s4d.io/widget-demo/archives/${VERSION_NUMBER}/" npm run build:package widget-demo
      - run:
          name: "Push to upstream/master"
          command: git push upstream HEAD:master
      - run:
          name: "Push tag to upstream/master"
          command: git push --tags upstream
      - run:
          name: "Publish to NPM"
          command: npm run publish:components
      - persist_to_workspace:
          root: ~/react-widgets
          paths:
            - package.json
            - packages/node_modules/@webex/widget-space/dist
            - packages/node_modules/@webex/widget-recents/dist
            - packages/node_modules/@webex/widget-demo/dist

  deploy_to_cdn:
    executor: main-executor
    working_directory: ~/react-widgets
    steps:
      - checkout
      - restore_workspace
      - run:
          name: "Grab Version Number"
          command: |
            echo export VERSION_NUMBER=$(npx -c 'echo \"$npm_package_version\"') >> $BASH_ENV
      - run:
          name: "Verify version number"
          command: echo ${VERSION_NUMBER}
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-space/dist
          to: s3://${AWS_BUCKET}/widget-space/alpha
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-space/dist
          to: s3://${AWS_BUCKET}/widget-space/archives/${VERSION_NUMBER}
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-recents/dist
          to: s3://${AWS_BUCKET}/widget-recents/alpha
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-recents/dist
          to: s3://${AWS_BUCKET}/widget-recents/archives/${VERSION_NUMBER}
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-demo/dist
          to: s3://${AWS_BUCKET}/widget-demo/alpha
      - aws-s3/sync:
          from: ~/react-widgets/packages/node_modules/@webex/widget-demo/dist
          to: s3://${AWS_BUCKET}/widget-demo/archives/${VERSION_NUMBER}

  promote_alpha_to_beta:
    executor: main-executor
    working_directory: ~/react-widgets
    steps:
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-space/alpha
          to: s3://${AWS_BUCKET}/widget-space/beta
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-recents/alpha
          to: s3://${AWS_BUCKET}/widget-recents/beta
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-demo/alpha
          to: s3://${AWS_BUCKET}/widget-demo/beta

  promote_beta_to_production:
    executor: main-executor
    working_directory: ~/react-widgets
    steps:
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-space/beta
          to: s3://${AWS_BUCKET}/widget-space/production
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-recents/beta
          to: s3://${AWS_BUCKET}/widget-recents/production
      - aws-s3/sync:
          from: s3://${AWS_BUCKET}/widget-demo/beta
          to: s3://${AWS_BUCKET}/widget-demo/production

  tag_for_production:
    executor: main-executor
    working_directory: ~/react-widgets
    steps:
      - checkout
      - run: git remote add upstream git@github.com:webex/react-widgets.git
      - run: git fetch --all --tags --prune
      - jq/install
      - run:
          name: "Grab Version Number"
          command: |
            PRODUCTION_VERSION_NUMBER=$(curl -s -f 'https://code.s4d.io/widget-space/production/manifest.json' | jq -r '.version')

            echo PRODUCTION_VERSION_NUMBER="${PRODUCTION_VERSION_NUMBER}" >> $BASH_ENV
      - run:
          name: "Delete old production tag"
          command: git push upstream :refs/tags/production
      - run: git checkout tags/v${PRODUCTION_VERSION_NUMBER}
      - run:
          name: "Create new production tag"
          command: |
            git tag -f production
      - run:
          name: "Push tag to upstream/master"
          command: git push --tags upstream

  tap_test:
    executor: main-executor
    environment:
      SAUCE: true
    steps:
      - checkout
      - run: |
          git remote add upstream git@github.com:webex/react-widgets.git
          git fetch --all --tags --prune
          git checkout tags/production
      - restore_node_modules
      - run: npm i
      - run:
          name: "Generate Build Number"
          command: echo "export BUILD_NUMBER=CircleCI-React-Widgets-TAP_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run:
          command: npm run test:tap
          no_output_timeout: 30m
      - store_test_results:
          path: reports/
      - store_test_results:
          path: reports/junit/wdio
      - store_test_results:
          path: reports/cobertura.xml
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: reports/cobertura.xml
          destination: cobertura.xml
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
          destination: npm-logs
      # - run:
      #     name: 'Create Incident on PagerDuty'
      #     when: on_fail
      #     command: |
      #       # Easier way of assigning variables in a json object without escaping double quotes in the curl command
      #       generate_incident_data() {
      #         # '\<<' must be escaped in v2.1+ due to yaml conflicts
      #         # https://discuss.circleci.com/t/2-1-config-and-build-processing/24102/31
      #         cat \<<EOF
      #       {
      #         "routing_key": "${PAGERDUTY_KEY}",
      #         "event_action": "trigger",
      #         "payload": {
      #           "summary": "FAILURE: React Widgets TAP Test",
      #           "source": "CircleCI - React Widgets",
      #           "severity": "critical"
      #         },
      #         "links": [
      #           {
      #             "href": "${CIRCLE_BUILD_URL}",
      #             "text": "CircleCI - React Widgets TAP Test - Build #${CIRCLE_BUILD_NUM}"
      #           }
      #         ],
      #         "client": "CircleCI - React Widgets TAP Test - Build #${CIRCLE_BUILD_NUM}",
      #         "client_url": "${CIRCLE_BUILD_URL}"
      #       }
      #       EOF
      #       }
      #       curl -X POST --header 'Content-Type: application/json' -d "$(generate_incident_data)" https://events.pagerduty.com/v2/enqueue

workflows:
  run_all_tests:
    jobs:
      - install:
          filters:
            branches:
              ignore:
                - master
      - build_for_tests:
          requires:
            - install
      - unit_tests_and_linting:
          requires:
            - install
      - journey_tests_chrome:
          requires:
            - build_for_tests
      - journey_tests_firefox:
          requires:
            - build_for_tests
  build_for_cdn:
    jobs:
      - install:
          filters:
            branches:
              only: master
      - version_and_publish:
          requires:
            - install
      - deploy_to_cdn:
          requires:
            - version_and_publish
  promotions:
    triggers:
      - schedule:
          # Wednesdays @ 7AM UTC | 3AM EST | 12AM PST
          cron: "0 7 * * 3"
          filters:
            branches:
              only:
                - master
    jobs:
      - promote_beta_to_production
      - promote_alpha_to_beta:
          requires:
            - promote_beta_to_production
      - tag_for_production:
          requires:
            - promote_beta_to_production
  tap:
    triggers:
      - schedule:
          # Everyday @ 6PM UTC | 4PM EST | 1PM PST
          cron: "0 18 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - install
      - tap_test:
          requires:
            - install
